// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  role          String?
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  sessions      Session[]
  accounts      Account[]

  lessons       Lesson[]
  itineraries   Itinerary[]
  lessonProgresses UserLessonProgress[]
  exerciseProgresses  UserExerciseProgress[]

  @@unique([email])
  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum ExerciseType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  MATCHING
}

enum Difficulty {
  EASY
  MEDIUM
  ADVANCED
}

model Theory {
  id          String          @id @default(uuid())
  title       String
  content     String
  imageUrls   String[]        @default([])
  imageAlts   String[]        @default([])

  lessonTheories  LessonTheory[]

  @@map("theorie")
}

model Exercise {
  id              String            @id @default(uuid())
  title           String
  type            ExerciseType
  answer          String            @default("")
  failedFeedback  String            @default("")
  multiple_choice_options String[]  @default([])
  answerExample   String?

  lessonExercises LessonExercise[]
  exerciseProgresses  UserExerciseProgress[]

  @@map("exercise")
}

model Lesson {
  id          String          @id @default(uuid()) // Added @id @default(uuid())
  title       String
  description String
  summary     String          @default("")
  ownerId     String
  owner       User            @relation(fields: [ownerId], references: [id])
  generated   Boolean         @default(false)
  theories    LessonTheory[] // Relation to the linking table for theories
  exercises   LessonExercise[] // Relation to the linking table for exercises
  itineraryLessons ItineraryLesson[] // Relation to the linking table for itineraries
  lessonProgresses UserLessonProgress[]

  @@map("lesson")
}

// Linking table for Lesson and Theory (many-to-many)
model LessonTheory {
  id       String @id @default(uuid()) // Added @id @default(uuid())
  lessonId String
  theoryId String
  lesson   Lesson @relation(fields: [lessonId], references: [id])
  theory   Theory @relation(fields: [theoryId], references: [id])
  position Int    // To maintain the order of theories within a lesson

  @@unique([lessonId, theoryId])
  @@map("lesson_theorie")
}

// Linking table for Lesson and Exercise (many-to-many)
model LessonExercise {
  id         String   @id @default(uuid()) // Added @id @default(uuid())
  lessonId   String
  exerciseId String
  lesson     Lesson   @relation(fields: [lessonId], references: [id])
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  position   Int      // To maintain the order of exercises within a lesson

  @@unique([lessonId, exerciseId])
  @@map("lesson_exercise")
}

model UserLessonProgress {
  id        String   @id @default(uuid())
  userId    String
  lessonId  String
  completed Boolean  @default(false)
  completedAt DateTime?

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("user_lesson_progress")
}

model UserExerciseProgress {
  id          String   @id @default(uuid())
  userId      String
  exerciseId  String
  completed   Boolean  @default(false)
  completedAt DateTime?
  attempts    Int      @default(0)
  score       Float?   // si quieres guardar nota o porcentaje

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercise    Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@unique([userId, exerciseId])
  @@map("user_exercise_progress")
}

// Represents an itinerary composed of multiple lessons
model Itinerary {
  id          String            @id @default(uuid()) // Added @id @default(uuid())
  title       String
  description String
  ownerId     String
  owner       User              @relation(fields: [ownerId], references: [id])
  lessons     ItineraryLesson[] // Relation to the linking table for lessons

  subject     String
  difficulty  Difficulty
  course      String

  @@map("itinerarie")
}

// Linking table for Itinerary and Lesson (many-to-many)
model ItineraryLesson {
  id          String  @id @default(uuid()) // Added @id @default(uuid())
  itineraryId String
  lessonId    String
  itinerary   Itinerary @relation(fields: [itineraryId], references: [id])
  lesson      Lesson    @relation(fields: [lessonId], references: [id])
  position    Int     // To maintain the order of lessons within an itinerary

  @@unique([itineraryId, lessonId])
  @@map("itinerary_lesson")
}
